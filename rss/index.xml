<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Musings of Marc]]></title><description><![CDATA[I'm a core contributor on apiman, an open source API Management platform. My surname does not rhyme with gravy.]]></description><link>http://www.rhymewithgravy.com</link><generator>RSS for Node</generator><lastBuildDate>Tue, 18 Oct 2016 21:02:20 GMT</lastBuildDate><atom:link href="http://www.rhymewithgravy.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Vert.x  and Blocking Code]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>One of Vert.x&#8217;s core tenets is that you should <a href="http://vertx.io/docs/vertx-core/java/#golden_rule">never block the event loop</a>. If you&#8217;re writing an application from scratch and limit yourself to Vert.x&#8217;s provided facilities you&#8217;ll not go far wrong.</p>
</div>
<div class="paragraph">
<p>However, if you&#8217;re writing a more complex application (such as apiman) there&#8217;s a good chance that you&#8217;ll be forced to stray outside of these boundaries, for example: integration constraints; inherently blocking protocols; static or shared data-structures. <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
<div class="paragraph">
<p>Luckily, the Vert.x team understand this, and have provided ways to work with these real-world requirements.</p>
</div>
<div class="paragraph">
<p>Back in the Vert.x 1.x and early 2.x days you only had one option: <a href="http://vertx.io/docs/vertx-core/java/#worker_verticles"><em>worker verticles</em></a>. Now the team have expanded things and there are several excellent options; so, let&#8217;s have a quick review of them. <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup></p>
</div>
<div id="toc" class="toc">
<div id="toctitle" class="title">Sections</div>
<ul class="sectlevel1">
<li><a href="#_why_is_blocking_bad_anyway">Why is blocking bad, anyway?</a></li>
<li><a href="#_solutions">Solutions</a>
<ul class="sectlevel2">
<li><a href="#_worker_verticles">Worker Verticles</a></li>
<li><a href="#_execute_blocking_statements">Execute Blocking Statements</a></li>
<li><a href="#_vert_x_sync">Vert.x Sync</a></li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_why_is_blocking_bad_anyway">Why is blocking bad, anyway?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vert.x uses a pragmatic implementation of the reactor model (more specifically multi-reactor).</p>
</div>
<div class="paragraph">
<p>A simple way to visualise this is to imagine there is only one thread per core, looping indefinitely, and executing work (handlers) from a queue. Many verticle instances share a given reactor; their execution is also <em>enqueued</em> as a task and runs asynchronously - that is, it only runs when the reactor has churned through any preceding tasks and reaches the verticle&#8217;s task(s). Each task runs <em>on the reactor thread directly</em>.</p>
</div>
<div class="paragraph">
<p>Hence, if any of those enqueued tasks executed a blocking operation, such as listening on a socket, <em>the entire reactor</em> would be unable to make progress until the thread resumed.<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup></p>
</div>
<div class="paragraph">
<p>Instead, Vert.x deals with blocking operations <em>outside of the event loop</em>; enqueuing a handler to be invoked when <em>the result</em> of the blocking operation is completed <sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup>. For instance, instead of blocking on a socket until something arrives, we ask the operating system to call us back when something relevant arrives and invoke our handler with the result.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
The key benefit of this approach is that the reactor thread <em>does not need to block</em>, so it can achieve excellent CPU utilisation - spending as much of its time as possible usefully executing, rather than waiting or being blocked.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In contrast, the typical webserver&#8217;s threads will spend much of their time in a non-running state (e.g. blocked or waiting), leaving large amounts of CPU time unused <sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup>. To combat resource under-utilisation developers harness large numbers of threads so that new requests can continue to be satisfied. However, this incurs substantial CPU, memory and latency costs due to frequent <a href="https://en.wikipedia.org/wiki/Context_switch#Cost">context switching</a> <sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup>.</p>
</div>
<div class="paragraph">
<p>But, what if you <em>need</em> to do a blocking operation and it&#8217;s  not one of Vert.x&#8217;s supported things?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_solutions">Solutions</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_worker_verticles">Worker Verticles</h3>
<div class="paragraph">
<p>The first approach Vert.x offered was <a href="http://vertx.io/docs/vertx-core/java/#worker_verticles">worker verticles</a>. Each worker verticle instance executes entirely on its own thread taken from a threadpool, hence when an operation blocks it does not affect the event loop or block progress.</p>
</div>
<div class="paragraph">
<p>If your verticle&#8217;s work is <em>predominantly</em> blocking, then a worker verticle is a good option. You can use the pattern outlined in the example below to send and receive work over the event bus - this maintains asynchronicity and non-blocking behaviour in your standard verticles whilst allowing you to offload long-running, blocking functionality onto worker verticles. You should aim to minimise the amount of code run in worker verticles to maximise overall resource utilisation. <sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup></p>
</div>
<div class="sect3">
<h4 id="_offering_a_blocking_service">Offering a blocking service</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">package com.example.foo;

public class BlockingVerticle extends AbstractVerticle {
    @Override
    public void start() throws Exception {
        vertx.eventBus().&lt;String&gt;consumer("com.rhymewithgravy.doesit",
            message -&gt; { <i class="conum" data-value="0"></i><b>(0)</b>
                boolean answer = SlowBlockingRhyme
                	  .doesItRhymeWithGravy(message.body()); <i class="conum" data-value="1"></i><b>(1)</b>
                message.reply(answer);
            } );
    }

    public static void main(String... args) {
        DeploymentOptions opts = new DeploymentOptions().
            setWorker(true); <i class="conum" data-value="2"></i><b>(2)</b>
        Vertx.vertx()
        	.deployVerticle("com.example.foo.BlockingVerticle", opts); <i class="conum" data-value="3"></i><b>(3)</b>
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Listening (non-blocking) on the event bus.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A service that blocks while it figures out if a word rhymes with gravy. Mostly the answer is no.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Setting the verticle to be deployed as a worker with <code>setWorker(true)</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Deploying the verticle, as normal.</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_consuming_a_blocking_service">Consuming a blocking service</h4>
<div class="paragraph">
<p>Here&#8217;s an example of the some non-blocking sender code which may interact with our fictional service over the event bus:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">vertx.eventBus().send("com.rhymewithgravy.com.doesit", <i class="conum" data-value="1"></i><b>(1)</b>
    "apples", <i class="conum" data-value="2"></i><b>(2)</b>
    reply -&gt; {
        System.out.println("Does apples rhyme with gravy? "
            + reply.result().body()); <i class="conum" data-value="3"></i><b>(3)</b>
    }
);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Send a message to the service over the event bus.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Contents of message to send (i.e. word we want to send to rhyme service).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Print out the blocking service&#8217;s response:  "no", I would presume!</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_execute_blocking_statements">Execute Blocking Statements</h3>
<div class="paragraph">
<p>If the majority of your verticle&#8217;s work <em>does not</em> involve blocking (which is probably the most common scenario), then executing the entire verticle on a worker thread is rather wasteful. Even with clever optimisations it isn&#8217;t fully exploiting the platform&#8217;s strengths.</p>
</div>
<div class="paragraph">
<p>It is possible to work around this limitation by separating blocking and non-blocking code into separate verticles, with the event bus acting as the asynchronous bridge to avoid the blocking verticle stopping progress in the non-blocking verticle. However, this can be rather unwieldy and forcing unnecessary boilerplate and complexity where it isn&#8217;t desirable.</p>
</div>
<div class="paragraph">
<p>So, a newer and much more elegant solution was introduced for exactly these scenarios: <em>executeBlocking</em>.</p>
</div>
<div class="paragraph">
<p>Code run in an <code>executeBlocking</code> handler will be run from the worker threadpool, with the results passed back asynchronously.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">vertx.executeBlocking(future -&gt; {
    boolean result = FastBlockingRhyme.doesItRhymeWithGravy("apples"); <i class="conum" data-value="1"></i><b>(1)</b>
    future.complete(result); <i class="conum" data-value="2"></i><b>(2)</b>
}, res -&gt; {
    if (result.succeeded()) {
        System.out.println("Does apples rhyme with gravy?  "
          + res.result()); <i class="conum" data-value="3"></i><b>(3)</b>
    }
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>New improved rhyme engine, it blocks but is fast.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Indicate that the work in the block has been completed: successfully or otherwise.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The result pops out in the second lambda, and we print out a helpful message.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><em>executeBlocking</em> is achieving the same work as the event bus pattern shown in the <a href="#_worker_verticles">Worker Verticles</a> example, but is much more concise, efficient and less error-prone.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<code>executeBlocking</code> should be the preferred way of running blocking code for most simple use cases.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_vert_x_sync">Vert.x Sync</h3>
<div class="paragraph">
<p><a href="http://vertx.io/docs/vertx-sync/java/">Sync</a> the newest area of development for handling blocking code in Vert.x, taking an extremely different approach to the aforementioned techniques. <a href="http://www.paralleluniverse.co/quasar/">Quasar</a> is used to offload blocking work onto <em>fibres</em>, which are extremely lightweight non-kernel threads that don&#8217;t incur the same context switching penalty as traditional threads.</p>
</div>
<div class="paragraph">
<p>It&#8217;s not an option which I&#8217;ve had the opportunity to explore in much depth yet, but I&#8217;m going to spend some time analysing it and follow up; for example, to <a href="https://twitter.com/jetdrone/status/787532093186306049">understand performance implications</a>, maintainability changes and deployment considerations. It sounds a promising area of research and development; asynchronous development tends to be trickier and can suffer from "handler inception" (excessive forwarding and handler hell) which Sync helps flatten out.</p>
</div>
<div class="paragraph">
<p>One of the most obvious differences is that you must instrument the JVM with the Quasar agent, and that the code modifications are coupled to a specific technology. It also only works with Java at the moment.</p>
</div>
<div class="paragraph">
<p>Watch this space!</p>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Usually you want to avoid these, but for various reasons you may be compelled to do so
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. I&#8217;m assuming you have at least a passing understanding of how to write code in Vert.x)
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. In the meanwhile the latency of waiting tasks is shooting up and work may have to be rejected via timeout.
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. Or making progress in some meaningful way, such as streaming data.
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. And reducing responsiveness if/when the threadpool is exhausted.
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. Switching stacks and registry values; lots of thread state changes; etc
</div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7">7</a>. There are more advanced options available, such as multithreaded workers which can help improve performance on specific workloads, but are out of the scope of this blogpost. Multithreaded workers require thread-safe code.
</div>
</div>]]></description><link>http://www.rhymewithgravy.com/2016/10/18/Vertx-and-Blocking-Code.html</link><guid isPermaLink="true">http://www.rhymewithgravy.com/2016/10/18/Vertx-and-Blocking-Code.html</guid><category><![CDATA[vertx]]></category><category><![CDATA[ apiman]]></category><dc:creator><![CDATA[Marc Savy]]></dc:creator><pubDate>Tue, 18 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Byteman now available in homebrew]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>A friend and colleague of mine, Andrew Dinn, is the brains behind the brilliant <a href="http://byteman.jboss.org/">Byteman project</a>. I recently contributed a <a href="http://brew.sh/">brew</a> formula to install Byteman and all of its scripts on OS X systems - allowing a package manager to sort out installing everything in sensible locations, with upgrading and other hassles handled for you.</p>
</div>
<div class="paragraph">
<p>Install brew if you haven&#8217;t, and then run <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ brew install byteman</pre>
</div>
</div>
<div class="paragraph">
<p>If you need to, you can install the latest development version of Byteman with (e.g. ALPHA releases):</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ brew install byteman --devel</pre>
</div>
</div>
<div class="paragraph">
<p>You can upgrade Byteman with <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ brew upgrade byteman</pre>
</div>
</div>
<div class="paragraph">
<p>You should now have all of the Byteman wrappers and binaries available on your path!</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ bmjava -version</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_s_byteman">What&#8217;s Byteman?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you&#8217;re not familiar with Byteman, it&#8217;s an incredibly powerful byecode manipulation utility for testing, monitoring and tracing. It can be invoked via <a href="https://developer.jboss.org/wiki/ABytemanTutorial#top">scripts or API</a>.</p>
</div>
<div class="paragraph">
<p>It&#8217;s particularly useful for tracking down difficult-to-reproduce concurrency bugs, as you can use it to precisely orchestrate thread orderings (interleavings, etc), wait periods, inject faults etc. There are also some cool up-and-coming projects using it to dynamically inject <a href="https://github.com/hawkular/hawkular-apm">tracing and monitoring</a> into existing code.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. You may need to <code>brew update</code> to download the formula if you haven&#8217;t done so in a long time.
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Or just <code>brew upgrade</code> to do everything.
</div>
</div>]]></description><link>http://www.rhymewithgravy.com/2016/09/16/Byteman-now-available-in-homebrew.html</link><guid isPermaLink="true">http://www.rhymewithgravy.com/2016/09/16/Byteman-now-available-in-homebrew.html</guid><category><![CDATA[brew]]></category><category><![CDATA[ byteman]]></category><category><![CDATA[ java]]></category><dc:creator><![CDATA[Marc Savy]]></dc:creator><pubDate>Fri, 16 Sep 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Changing the root-context for apiman's gateway]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>An <a href="http://www.apiman.io/">apiman</a> user recently asked me how they could change the root context of apiman-gateway from <code>/apiman-gateway/</code> to something else, for instance <code>/i-love-apiman/</code>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
If you&#8217;re using a load balancer or some other mapper, just skip to the <a href="#_alternatives">Alternatives</a> section or <a href="http://www.apiman.io/latest/production-guide.html#_setting_the_api_gateway_public_endpoint">read the apiman production guide</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If you are using the WildFly or EAP apiman distributions (such as <a href="http://www.apiman.io/latest/download.html">our quickstart</a>), here&#8217;s an easy answer <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Unpack <code>apiman-gateway.war</code>.</p>
<div class="literalblock">
<div class="content">
<pre>$ unzip apiman-gateway.war -d /tmp/apiman-gateway</pre>
</div>
</div>
</li>
<li>
<p>Edit <code>/tmp/apiman-gateway/WEB-INF/jboss-web.xml</code> to be to your new preferred context, e.g. <code>i-love-apiman</code>.</p>
</li>
<li>
<p>Repack the war.</p>
<div class="literalblock">
<div class="content">
<pre>$ zip -r apiman-gateway.war /tmp/apiman-gateway/META-INF /tmp/apiman-gateway/WEB-INF</pre>
</div>
</div>
</li>
<li>
<p>Replace the existing deployment.</p>
</li>
<li>
<p>Alter your <code>apiman.properties</code> file and set <code>apiman-gateway.public-endpoint=&lt;new public endpoint&gt;</code>. <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup></p>
<div class="literalblock">
<div class="content">
<pre>apiman-gateway.public-endpoint=https://localhost:8443/i-love-apiman/</pre>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_result">Result</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you publish an API to the gateway setup you modified, you should see something like this in the UI:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://i.imgur.com/tqjusT6.png" alt="https://localhost:8443/i-love-apiman/test/test/1.0">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_alternatives">Alternatives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can, of course, just set mappings on your load balancer (or some other technique external to apiman) if you want to avoid fiddling with the deployments. Even then, you&#8217;ll still probably want to set <code>apiman-gateway.public-endpoint</code> to report a sensible value for your setup.</p>
</div>
<div class="paragraph">
<p>One final note: you can set these options via Java&#8217;s system properties, too</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ ./bin/standalone.sh -Dapiman-gateway.public-endpoint=https://localhost:8443/i-love-apiman/</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. This procedure would be slightly different for other platforms such as Vert.x, Tomcat, etc
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. See: <a href="http://www.apiman.io/latest/production-guide.html#_setting_the_api_gateway_public_endpoint" class="bare">http://www.apiman.io/latest/production-guide.html#_setting_the_api_gateway_public_endpoint</a>
</div>
</div>]]></description><link>http://www.rhymewithgravy.com/2016/08/24/Changing-the-root-context-for-apimans-gateway.html</link><guid isPermaLink="true">http://www.rhymewithgravy.com/2016/08/24/Changing-the-root-context-for-apimans-gateway.html</guid><category><![CDATA[apiman]]></category><category><![CDATA[ apiman-gateway]]></category><category><![CDATA[ guide]]></category><category><![CDATA[ api management]]></category><dc:creator><![CDATA[Marc Savy]]></dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Beware the Connection Header in HTTP/2]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="http://www.rhymewithgravy.com/2016/08/21/Setting-up-Vertx-HTT-P-with-JKS.html">Whilst tinkering apiman&#8217;s Vert.x gateway implementation</a> I ran into a strange issue when invoking an API via <code>curl --http2</code>. It seemed to work fine in Chrome and using Go&#8217;s <a href="https://github.com/fstab/h2c">h2c</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ * http2 error: Invalid HTTP header field was received: frame type: 1, stream: 1, name: [connection], value: [keep-alive]</pre>
</div>
</div>
<div class="paragraph">
<p>This is what the setup looks like (distilled):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>HTTP/2 Client &lt;--&gt; Apiman Gateway (HTTP/2) &lt;--&gt; Test API (HTTP/1)</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_s_going_on">What&#8217;s going on?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I took to Twitter to figure out what was going on.</p>
</div>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/apiman_io">@apiman_io</a> <a href="https://twitter.com/clementplop">@clementplop</a> although the cURL --http2 doesn&#39;t like the headers Vert.x sends - interesting <a href="https://t.co/0dK81huCmb">https://t.co/0dK81huCmb</a></p>&mdash; Marc Savy (@marcsavy) <a href="https://twitter.com/marcsavy/status/767038443151036416">August 20, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="paragraph">
<p>Out of the blue, Mr cURL himself (Daniel Stenberg) popped up with the answer quoted from <a href="https://tools.ietf.org/html/rfc7540#section-3.2.1">RFC 7540</a>:</p>
</div>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/marcsavy">@marcsavy</a> <a href="https://twitter.com/apiman_io">@apiman_io</a> <a href="https://twitter.com/clementplop">@clementplop</a> &quot;An endpoint MUST NOT generate an HTTP/2 message containing connection-specific header fields&quot;</p>&mdash; Daniel Stenberg (@bagder) <a href="https://twitter.com/bagder/status/767052367686688768">August 20, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
</div>
<div class="sect1">
<h2 id="_mystery_solved">Mystery solved</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Aha! The backend API apiman was <strong>proxying the response from</strong> returned a <code>Connection: keep-alive</code> header. Apiman simply forwarded this on, but it turns out this violates the HTTP/2 spec as <strong>there should be no connection-specific header fields</strong> - in response cURL spits out the error we see above. <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>HTTP/2 Client (http2 error...) &lt;- Apiman Gateway &lt;- Test API (sets "Connection: keep-alive")</code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://github.com/apiman/apiman/pull/498">The solution</a> was just to filter out <code>Connection</code> headers in apiman, but I wonder whether Vert.x should do it by default (or show an error message, exception, etc).</p>
</div>
<div class="paragraph">
<p>That said, I think <em>"it&#8217;s the app&#8217;s responsibility not to do stupid things"</em> or <em>"we should handle it and filter out Connection headers"</em> are both valid responses depending upon philosophy.</p>
</div>
<div class="paragraph">
<p>So, <a href="https://twitter.com/julienviet/status/767385923633967105">I let the Vert.x guys know</a>, and let&#8217;s see.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Other implementations seem to just ignore these irrelevant fields.
</div>
</div>]]></description><link>http://www.rhymewithgravy.com/2016/08/23/Beware-the-Connection-Header-in-HTT-P.html</link><guid isPermaLink="true">http://www.rhymewithgravy.com/2016/08/23/Beware-the-Connection-Header-in-HTT-P.html</guid><category><![CDATA[vertx]]></category><category><![CDATA[ apiman]]></category><category><![CDATA[ http2]]></category><dc:creator><![CDATA[Marc Savy]]></dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Setting up Vert.x HTTP/2 with JKS]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>I was playing with <a href="http://vertx.io/">Vert.x&#8217;s</a> excellent HTTP/2 functionality with the aim of determining how difficult it&#8217;d be to add support into <a href="http://apiman.io">apiman</a>'s Vert.x <a href="https://github.com/apiman/apiman/tree/master/gateway/platforms/vertx3/vertx3">gateway implementation</a> (which is still somewhat of a tech preview, but it&#8217;s finally getting some love). Many HTTP/2 clients don&#8217;t support non-TLS connections, so transport security is a de facto requirement in the real-world usage (particularly with browsers).</p>
</div>
<div class="paragraph">
<p>There&#8217;s already <a href="https://github.com/vert-x3/vertx-examples/blob/master/core-examples/src/main/java/io/vertx/example/core/http2/simple/Server.java">an example</a> in the Vert.x <code>core-examples</code> repository demonstrating how to set up and use HTTP/2. However, when using a keystore in JKS format, Vert.x (in v3.3.2, at least) tries to use Jetty&#8217;s <code>alpn-boot</code> ALPN implementation rather than OpenSSL.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a_few_simple_steps">A few simple steps&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So, here&#8217;s how to go about making it work:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Download the version of <code>apln-boot</code> <a href="http://www.eclipse.org/jetty/documentation/9.4.x/alpn-chapter.html#alpn-versions">corresponding to your version of Java</a>. The binaries are available on <a href="https://repo1.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/">Maven Central</a>, or you can build your own if you prefer.</p>
</li>
<li>
<p>When launching your verticle, put <code>alpn-boot</code> on the JVM&#8217;s <em>boot classpath</em>; it&#8217;s altering core library functionality and needs to be available early. There are a few ways to do this, here&#8217;s the easiest one:</p>
<div class="literalblock">
<div class="content">
<pre>$ JAVA_OPTS=-Xbootclasspath/p:&lt;path-to-apln-boot.jar&gt; vertx run Example.java</pre>
</div>
</div>
<div class="paragraph">
<p>If you&#8217;re using an IDE you should add <code>-Xbootclasspath/p:&lt;path-to-apln-boot.jar&gt;</code> to the VM Arguments of your run configuration.</p>
</div>
</li>
<li>
<p>Set <code>setUseAlpn(true)</code> on your <code>HttpServerOptions</code>.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_testing_it_out">Testing it out</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Here&#8217;s some code to test it with.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">import io.vertx.core.AbstractVerticle;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.net.JksOptions;

public class Example extends AbstractVerticle {

    @Override
    public void start() throws Exception {
        HttpServer server =
        vertx.createHttpServer(new HttpServerOptions()
            .setUseAlpn(true)
            .setSsl(true)
            .setKeyStoreOptions(
                new JksOptions()
                .setPath(&lt;Path to your JKS&gt;)
                .setPassword(&lt;The JKS password&gt;)
            )
        );

        server.requestHandler(req -&gt; {
            req.response().putHeader("Content-Type", "text/plain")
                .end("Greetings, Earthicans!\n");
        }).listen(8443);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You&#8217;ll likely want to check that it&#8217;s really working. I&#8217;ve been using <code>cURL</code> compiled with <code>nghttp2</code> to enable HTTP/2 support; depending on your OS or distro, the shipping version may have been built with it. If you&#8217;re using OS X, you can use <code>brew install curl --with-nghttp2</code>. <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shellsession" data-lang="shellsession"> $  curl -k -v --http2 https://localhost:8443/
 *   Trying ::1...
 * Connected to localhost (::1) port 8443 (#0)
 * ALPN, offering h2
 * ALPN, offering http/1.1
 * Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
 * successfully set certificate verify locations:
 *   CAfile: /usr/local/etc/openssl/cert.pem
   CApath: none
 * TLSv1.2 (OUT), TLS header, Certificate Status (22):
 * TLSv1.2 (OUT), TLS handshake, Client hello (1):
 * TLSv1.2 (IN), TLS handshake, Server hello (2):
 * TLSv1.2 (IN), TLS handshake, Certificate (11):
 * TLSv1.2 (IN), TLS handshake, Server key exchange (12):
 * TLSv1.2 (IN), TLS handshake, Server finished (14):
 * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
 * TLSv1.2 (OUT), TLS change cipher, Client hello (1):
 * TLSv1.2 (OUT), TLS handshake, Finished (20):
 * TLSv1.2 (IN), TLS change cipher, Client hello (1):
 * TLSv1.2 (IN), TLS handshake, Finished (20):
 * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
 * ALPN, server accepted to use h2
 * Server certificate:
 *  subject: C=lo; ST=localhost; L=localhost; O=localhost; OU=localhost; CN=localhost
 *  start date: Aug 20 15:23:02 2016 GMT
 *  expire date: Nov 18 15:23:02 2016 GMT
 *  issuer: C=lo; ST=localhost; L=localhost; O=localhost; OU=localhost; CN=localhost
 *  SSL certificate verify result: self signed certificate (18), continuing anyway.
 * Using HTTP2, server supports multi-use
 * Connection state changed (HTTP/2 confirmed)
 * TCP_NODELAY set
 * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
 * Using Stream ID: 1 (easy handle 0x7fb8aa008800)
 &gt; GET / HTTP/1.1
 &gt; Host: localhost:8443
 &gt; User-Agent: curl/7.50.1
 &gt; Accept: */*
 &gt;
 * Connection state changed (MAX_CONCURRENT_STREAMS updated)!
 &lt; HTTP/2 200
 &lt; content-type: text/plain
 &lt; content-length: 22
 &lt;
 * Connection #0 to host localhost left intact
 Greetings, Earthicans!</code></pre>
</div>
</div>
<div class="paragraph">
<p>Hooray!</p>
</div>
<div class="paragraph">
<p>Vert.x really is a gratifyingly well-thought-out and easy-to-use.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. But remember cURL is not linked by default so you&#8217;ll have to dig into its Cellar (e.g. /usr/local/Cellar/curl/7.50.1/bin/curl). Of course, you could alias it, or force link :-).
</div>
</div>]]></description><link>http://www.rhymewithgravy.com/2016/08/21/Setting-up-Vertx-HTT-P-with-JKS.html</link><guid isPermaLink="true">http://www.rhymewithgravy.com/2016/08/21/Setting-up-Vertx-HTT-P-with-JKS.html</guid><category><![CDATA[vertx]]></category><category><![CDATA[ apiman]]></category><category><![CDATA[ guide]]></category><category><![CDATA[ http2]]></category><dc:creator><![CDATA[Marc Savy]]></dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 GMT</pubDate></item></channel></rss>